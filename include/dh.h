#pragma once

#include "boost/multiprecision/cpp_int.hpp"
#include <span>
#include <vector>

using BigInt = boost::multiprecision::cpp_int;

namespace dh {
const uint8_t P[] = {
    0xcf, 0x5c, 0xf5, 0xc3, 0x84, 0x19, 0xa7, 0x24, 0x95, 0x7f, 0xf5, 0xdd,
    0x32, 0x3b, 0x9c, 0x45, 0xc3, 0xcd, 0xd2, 0x61, 0xeb, 0x74, 0x0f, 0x69,
    0xaa, 0x94, 0xb8, 0xbb, 0x1a, 0x5c, 0x96, 0x40, 0x91, 0x53, 0xbd, 0x76,
    0xb2, 0x42, 0x22, 0xd0, 0x32, 0x74, 0xe4, 0x72, 0x5a, 0x54, 0x06, 0x09,
    0x2e, 0x9e, 0x82, 0xe9, 0x13, 0x5c, 0x64, 0x3c, 0xae, 0x98, 0x13, 0x2b,
    0x0d, 0x95, 0xf7, 0xd6, 0x53, 0x47, 0xc6, 0x8a, 0xfc, 0x1e, 0x67, 0x7d,
    0xa9, 0x0e, 0x51, 0xbb, 0xab, 0x5f, 0x5c, 0xf4, 0x29, 0xc2, 0x91, 0xb4,
    0xba, 0x39, 0xc6, 0xb2, 0xdc, 0x5e, 0x8c, 0x72, 0x31, 0xe4, 0x6a, 0xa7,
    0x72, 0x8e, 0x87, 0x66, 0x45, 0x32, 0xcd, 0xf5, 0x47, 0xbe, 0x20, 0xc9,
    0xa3, 0xfa, 0x83, 0x42, 0xbe, 0x6e, 0x34, 0x37, 0x1a, 0x27, 0xc0, 0x6f,
    0x7d, 0xc0, 0xed, 0xdd, 0xd2, 0xf8, 0x63, 0x73};
const uint8_t G = 2;

class DH {
public:
  DH();

  std::vector<uint8_t> getPBytes();
  std::vector<uint8_t> getGBytes();
  std::vector<uint8_t> getPubBytes();
  std::vector<uint8_t> generateKey(std::span<uint8_t> remotePubKeyBytes);

private:
  BigInt p;
  BigInt g;
  BigInt privKey;
  BigInt pubKey;
};
} // namespace dh
